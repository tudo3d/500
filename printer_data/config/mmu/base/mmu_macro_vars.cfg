########################################################################################################################
# Happy Hare MMU Software
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Copyright (C) 2022-2025  moggieuk#6538 (discord)
#                          moggieuk@hotmail.com
# This file may be distributed under the terms of the GNU GPLv3 license.
#
# Goal: Happy Hare supporting MACRO configuration
#
# (\_/)
# ( *,*)
# (")_(") Happy Hare Ready
#
#
# Supporting set of macros supplied with Happy Hare can be customized by editing the macro "variables" declared here.
#
# This configuration will automatically retained and upgraded between releases (a backup of previous config files will
# always be made for your reference). If you want to customize macros beyond what is possible through these variables
# it is highly recommended you copy the macro to a new name and change the callback macro name in 'mmu_parameters.cfg'
# That way the default macros can still be upgraded but your customization will be left intact
#


# PERSISTED STATE ---------------------------------------------------------
# Happy Hare stores configuration and state in the klipper variables file.
# Since klipper can only be a single 'save_variables' file, if you already
# have one you will need to merge the two and point this appropriately.
#
#[save_variables]
#filename: ~/printer_data/config/mmu/mmu_vars.cfg


# NECESSARY KLIPPER OVERRIDES ---------------------------------------------
# ██╗  ██╗██╗     ██╗██████╗ ██████╗ ███████╗██████╗ 
# ██║ ██╔╝██║     ██║██╔══██╗██╔══██╗██╔════╝██╔══██╗
# █████╔╝ ██║     ██║██████╔╝██████╔╝█████╗  ██████╔╝
# ██╔═██╗ ██║     ██║██╔═══╝ ██╔═══╝ ██╔══╝  ██╔══██╗
# ██║  ██╗███████╗██║██║     ██║     ███████╗██║  ██║
# ╚═╝  ╚═╝╚══════╝╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝
#
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50

# For dialog prompts and progress in Mainsail. Requires Mainsail version >= v2.9.0
[respond]

# Other Happy Hare prerequisites. Harmless if already defined elsewhere in user config
[display_status]
[pause_resume]
[virtual_sdcard]
path: ~/printer_data/gcodes
#on_error_gcode: CANCEL_PRINT


# PRINT START/END ---------------------------------------------------------
# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗████████╗ █████╗ ██████╗ ████████╗
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       ███████╗   ██║   ███████║██████╔╝   ██║   
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ╚════██║   ██║   ██╔══██║██╔══██╗   ██║   
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████║   ██║   ██║  ██║██║  ██║   ██║   
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
#   (base/mmu_software.cfg)
#
[gcode_macro _MMU_SOFTWARE_VARS]
description: Happy Hare optional configuration for print start/end checks
gcode: # Leave empty

# These variables control the behavior of the MMU_START_SETUP and MMU_START_LOAD_INITIAL_TOOL macros
variable_user_pre_initialize_extension      : ''	; Executed at start of MMU_START_SETUP. Commonly G28 to home
variable_home_mmu                           : False	; True/False, Whether to home mmu before print starts
variable_check_gates                        : True	; True/False, Whether to check filament is loaded in all gates used
variable_load_initial_tool                  : True	; True/False, Whether to automatically load initial tool
#
# Automapping strategy to apply slicer tool map to find matching MMU gate (will adjust tool-to-gate map). Options are:
#   'none'           - don't automap (i.e. don't update tool-to-gate map)
#   'filament_name'  - exactly match on case insensitive filament name
#   'material'       - exactly match on material
#   'color'          - exactly match on color (with same material)
#   'closest_color'  - match to closest available filament color (with same material)
#   'spool_id'       - exactly match on spool_id  [FUTURE]
variable_automap_strategy                   : "none"	; none|filament_name|material|color|closest_color|spool_id

# These variables control the behavior of the MMU_END macro
variable_user_print_end_extension           : ''	; Executed at start of MMU_END. Good place to move off print
variable_unload_tool                        : True	; True/False, Whether to unload the tool at the end of the print
variable_reset_ttg                          : False	; True/False, Whether reset TTG map at end of print
variable_dump_stats                         : True	; True/False, Whether to display print stats at end of print


# STATE MACHINE CHANGES ---------------------------------------------------
# ███████╗████████╗ █████╗ ████████╗███████╗     ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗
# ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝    ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝
# ███████╗   ██║   ███████║   ██║   █████╗      ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  
# ╚════██║   ██║   ██╔══██║   ██║   ██╔══╝      ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  
# ███████║   ██║   ██║  ██║   ██║   ███████╗    ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗
# ╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝     ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝
#   (base/mmu_state.cfg)
#
[gcode_macro _MMU_STATE_VARS]
description: Happy Hare configuration for state change hooks
gcode: # Leave empty

# You can extend functionality to all Happy Hare state change or event
# macros by adding a command (or call to your gcode macro).
# E.g for additional LED logic or consumption counters
variable_user_action_changed_extension      : ''	; Executed after default logic with duplicate params
variable_user_print_state_changed_extension : ''	; Executed after default logic with duplicate params
variable_user_mmu_event_extension           : ''	; Executed after default logic with duplicate params

# Maintenance warning limits (consumption counters)
variable_servo_down_limit                   : 5000      ; Set to -1 for no limit / disable warning
variable_cutter_blade_limit                 : 3000      ; Set to -1 for no limit / disable warning

# MACRO DE SEQUÊNCIA - MOVIMENTO DE ESTACIONAMENTO E CONTROLE DE TROCA DE FERRAMENTA ----------------
# ███╗   ███╗ ██████╗ ██╗   ██╗███████╗███╗   ███╗███████╗███╗   ██╗████████╗
# ████╗ ████║██╔═══██╗██║   ██║██╔════╝████╗ ████║██╔═══██╗████╗  ██║╚══██╔══╝
# ██╔████╔██║██║   ██║██║   ██║█████╗  ██╔████╔██║█████╗  ██╔██╗ ██║   ██║   
# ██║╚██╔╝██║██║   ██║╚██╗ ██╔╝██╔══╝  ██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   
# ██║ ╚═╝ ██║╚██████╔╝ ╚████╔╝ ███████╗██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   
# ╚═╝     ╚═╝ ╚═════╝   ╚═══╝  ╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   
# Configure com cuidado se você definir 'enable_park: True'
#   (base/mmu_sequence.cfg)
#
[gcode_macro _MMU_SEQUENCE_VARS]
description: Happy Hare sequence macro configuration variables
gcode: # Leave empty

# Controles de estacionamento e movimento:
# O Happy Hare define 7 operações que podem exigir estacionamento (park). Você pode especificar
# se deve estacionar para cada uma dessas operações tanto durante uma impressão quanto
# em modo isolado (não imprimindo) com o Happy Hare, ou quando o HH estiver desativado:
#
# enable_park_printing
#    Esta é uma lista das operações que devem resultar no estacionamento do cabeçote
#    durante uma impressão. Há basicamente dois pontos de partida principais para personalizar.
#    Se você estiver usando o slicer para formar pontas (formar tip) (e a troca de ferramenta
#    ocorre sobre a wipetower) você não vai querer estacionar em "toolchange", mas sim em "runout",
#    que é uma troca forçada desconhecida pelo slicer. Tipicamente você também vai querer
#    estacionar pelo menos em pause, cancel e complete se isso não for feito em outro lugar
#
# enabled_park_standalone
#    Lista das operações que devem resultar em estacionamento quando não estiver imprimindo,
#    por exemplo, apenas manipulando a MMU manualmente ou via Klipperscreen. Isso depende
#    das preferências de fluxo de trabalho, mas o padrão é apenas 'pause,cancel'
#    (ou seja, desabilitado para toolchange)
#
# enabled_park_disabled
#    Lista das operações que devem resultar em estacionamento quando a MMU estiver
#    desabilitada (MMU ENABLE=0) e usando macros do cliente Happy Hare. Observe que apenas
#    pause e cancel podem ocorrer neste modo e normalmente seriam habilitados
#
# As operações são as seguintes:
#   toolchange - troca normal de ferramenta iniciada com Tx ou comando MMU_CHANGE_TOOL
#   runout     - quando ocorre uma troca forçada por falta de filamento (runout)
#   load       - operação individual MMU_LOAD
#   unload     - operação individual MMU_UNLOAD/MMU_EJECT
#   complete   - quando a impressão é concluída (Happy Hare habilitado)
#   pause      - um PAUSE normal do Klipper
#   cancel     - um CANCEL_PRINT normal do Klipper
#
# É possível chamar a macro de estacionamento manualmente nesta forma caso queira
# incluí-la nas suas macros.
#
#    _MMU_PARK FORCE_PARK=1 X=10 Y=10 Z_HOP=5
#
# restore_xy_pos
#    Controla para onde o cabeçote (x,y) retorna após uma operação que invoca um movimento de estacionamento:
#   last - retornar à posição original antes do estacionamento (frequentemente o padrão)
#   next - retornar para a próxima posição de impressão se possível, senão aplica a lógica 'last'.
#          Em impressão, isso reduz o tempo parado na última posição, diminuindo blobbing
#          e movimentos desnecessários. Aplicado apenas à operação "toolchange"
#   none - o cabeçote é deixado onde terminar após a troca. Em uma impressão o próximo comando gcode
#          restaurará a posição x,y
#
# Observações:
# - A altura Z inicial sempre será restaurada, portanto a diferença entre 'next'
#   e 'none' é a altura Z na qual o movimento X,Y ocorre e a localização de qualquer
#   desretração (un-retract)
# - A lógica padrão de estacionamento é um movimento em linha reta para a posição 'park_*'.
#   Para implementar movimentos mais elaborados você pode especificar seu próprio
#   'user_park_move_macro' para usar em vez do movimento G1 padrão
# - As coordenadas x,y de estacionamento podem ser negativas se sua impressora suportar
#
# A retração pode ser usada para otimizar stringing e bolhas que podem ocorrer ao
# mudar ferramentas e são ativas somente durante uma impressão.
# IMPORTANTE: Para troca de ferramenta a ordem de configuração seria:
#   1. Em mmu_parameters.cfg configure dimensões do extrusor como
#      'toolhead_extruder_to_nozzle', etc. Estas são baseadas na geometria.
#   2. Em mmu_parameters.cfg ajuste 'toolhead_ooze_reduction' somente se necessário
#      para que o filamento _apenas_ apareça no bico ao carregar
#   3. Só então ajuste a retração para controlar stringing e bolhas ao
#      trocar ferramenta durante a impressão
variable_enable_park_printing   : 'toolchange,runout,load,unload,complete,pause,cancel'	; Empty '' to disable parking
variable_enable_park_standalone : 'toolchange,load,unload,pause,cancel'			; Empty '' to disable parking
variable_enable_park_disabled   : 'pause,cancel'					; Empty '' to disable parking

variable_min_toolchange_z       : 1.0		; O limite mínimo absoluto de segurança (altura z) para TODOS os movimentos de estacionamento

# Estas especificam a localização de estacionamento, o salto em z (z_hop) e a retração para todos os tipos de operação
# Cada uma deve ter 5 valores:
#   x_coord, y_coord, z_hop(delta), z_hop_ramp, comprimento de retração
# Use -999,-999 para não mover x,y (você pode apenas ter z_hop). Use 0 para sem z_hop
# O z_hop ramp é a distância horizontal em mm para percorrer durante a subida. A
# direção é automática e aplicada apenas se estiver levantando pela primeira vez a partir da impressão.
# Este movimento é útil para ajudar a quebrar a "string" do filamento
variable_park_toolchange        : 420, -999, 1,  5, 2	; x,y,z-hop,z_hop_ramp,retract for "toolchange" operations (toolchange,load,unload)
variable_park_runout            : -999, -999, 1,  5, 2	; x,y,z-hop,z_hop_ramp,retract
variable_park_pause             : 400,   490,   2,  0, 1	; x,y,z-hop,z_hop_ramp,retract (park position when mmu error occurs)
variable_park_cancel            : 400, 495, 15, 0, 2	; x,y,z-hop,z_hop_ramp,retract
variable_park_complete          : 250,   495,   10, 0, 2	; x,y,z-hop,z_hop_ramp,retract

# Para operações de troca de ferramenta, isto permite especificar movimentos de estacionamento adicionais
# em vários estágios da troca. Cada um deve ter 3 valores:
#   x_coord, y_coord, z_hop(delta)
# Use -999,-999,0 para não mover naquele estágio (no-op).
# Todos os movimentos ocorrerão no plano de movimento estabelecido (altura z)
variable_pre_unload_position    : -999, -999, 0	; x,y,z-hop position before unloading starts
variable_post_form_tip_position : -999, -999, 0	; x,y,z-hop position after form/cut tip on unload
variable_pre_load_position      : -999, -999, 0	; x,y,z-hop position before loading starts

variable_restore_xy_pos         : "last"	; last|next|none - What x,y position the toolhead should travel to after a "toolchange"

variable_park_travel_speed      : 200		; Velocidade para qualquer movimento de viagem XY(Z) em mm/s
variable_park_lift_speed        : 15		; Velocidade de deslocamento apenas em Z em mm/s
variable_retract_speed          : 30		; Velocidade do movimento de retração em mm/s
variable_unretract_speed        : 30		; Velocidade do movimento de desretração em mm/s

# AVANÇADO: Normalmente os movimentos X,Y usam 'G1 X Y' para a posição de estacionamento. Isso permite
# que você crie movimentos exóticos. A macro receberá os seguintes parâmetros:
#    YOUR_MOVE_MACRO X=<x_coord> Y=<y_coord> F=<speed>
# ao restaurar a posição de estacionamento a mesma macro é chamada mas recebendo o parâmetro RESTORE=1,
# junto com as coordenadas para restaurar
#    YOUR_MOVE_MACRO RESTORE=1 X=<x_coord> Y=<y_coord> F=<speed>
variable_user_park_move_macro   : ''		; Executed instead of default 'G1 X Y move' to park position

variable_auto_home              : True		; True = faz homing automaticamente se necessário, False = desabilita
variable_timelapse              : False		; True = tirar snapshot para timelapse após carregamento, False = desabilita

# Em vez de definir completamente suas próprias macros, você pode estender a funcionalidade
# das macros de sequência padrão adicionando um comando (ou chamada ao seu macro gcode)
variable_user_mmu_error_extension     : ''	; Executado após a lógica padrão quando ocorre condição de erro da mmu
variable_user_pre_unload_extension    : ''	; Executado após a lógica padrão
variable_user_post_form_tip_extension : ''	; Executado após a lógica padrão
variable_user_post_unload_extension   : ''	; Executado após a lógica padrão
variable_user_pre_load_extension      : ''	; Executado após a lógica padrão
variable_user_post_load_extension     : ''	; Executado após a lógica padrão mas antes de restaurar a posição do cabeçote

# CUT_TIP -----------------------------------------------------------------
#  ██████╗██╗   ██╗████████╗    ████████╗██╗██████╗ 
# ██╔════╝██║   ██║╚══██╔══╝    ╚══██╔══╝██║██╔══██╗
# ██║     ██║   ██║   ██║          ██║   ██║██████╔╝
# ██║     ██║   ██║   ██║          ██║   ██║██╔═══╝ 
# ╚██████╗╚██████╔╝   ██║          ██║   ██║██║     
#  ╚═════╝ ╚═════╝    ╚═╝          ╚═╝   ╚═╝╚═╝     
# Don't need to configure if using tip forming
#   (base/mmu_cut_tip.cfg)
#
[gcode_macro _MMU_CUT_TIP_VARS]
description: Happy Hare toolhead tip cutting macro configuration variables
gcode: # Leave empty

# Whether the toolhead tip cutting macro will return toolhead to initial position
# after the cut is complete. If using parking logic it is better to disable this
variable_restore_position       : False		; True = return to initial position, False = don't return

# Distance from the internal nozzle tip to the cutting blade. This dimension
# is based on your toolhead and should not be used for tuning
# Note: If you have a toolhead sensor this variable can be automatically determined!
# Read https://github.com/moggieuk/Happy-Hare/wiki/Blobing-and-Stringing
variable_blade_pos              : 37.5		; TUNE ME: Distance in mm from internal nozzle tip

# Distance to retract prior to making the cut, measured from the internal nozzle
# tip. This reduces wasted filament (left behind in extruder) but might cause a
# clog if set too large. This must be less than 'blade_pos'
# Note: the residual filament left in nozzle ('toolhead_ooze_reduction') is
# subtracted from this value so make sure toolhead is calibrated
variable_retract_length         : 32.5		; TUNE ME: 5mm less than 'blade_pos' is a good starting point

# Whether to perform a simple tip forming move after the initial retraction
# Enabling this adds gives some additional cooling time of molten filament and
# may help avoid potential clogging on some hotends
variable_simple_tip_forming     : True		; True = Perform simple tip forming, False = skip

# Change to X and Y stepper current during the cut operation. Technically any stepper
# current can be modified by adding the stepper name to the list. Be careful not to
# overload your steppers but generally up to 150% is safe
variable_cut_axis_steppers      : 'stepper_x, stepper_y'	; Comma separated list of stepper names to increase current for cutting
variable_cut_stepper_current    : 100				; % of stepper current to use for cutting motion (100 to disable)

# This should be the position of the toolhead where the cutter arm just
# lightly touches the depressor pin
variable_cutting_axis           : "x"		; "x" or "y". Determines cut direction (axis) during cut motion, used for park distance
variable_pin_loc_xy             : 14, 250	; x,y coordinates of depressor pin

# This distance is added (or subtracted if negative) to "pin_loc_x" or "pin_loc_y" depending on the 'cutting_axis'
# This is used to determine the starting position and to create a small safety distance that aids in generating momentum.
# For example, Filametrix cuts along X axis towards Xmin requiring a positive value, whereas A4T-A4C cuts on Y axis towards
# Ymax requring a negative number
variable_pin_park_dist          : 5.0		; Distance in mm (+ve or -ve) from 'variable_pin_loc_xy'

# Position of the toolhead when the cutter is fully compressed. Should leave a small headroom from the
# extremes of your printer edges (e.g. it should be a bit larger than 0, or whatever Xmin is) to avoid
# banging the toolhead or gantry. Typically x position will match x in pin_loc_xy if cutting in y direction
# or y position will match y in pin_loc_xy if cutting in x direction, but diagonal cuts are possible
variable_pin_loc_compressed_xy  : 0.5, 250	; x,y coordinates of fully depressed location

# Retract length and speed after the cut so that the cutter blade doesn't
# get stuck on return to origin position
variable_rip_length             : 1.0		; Distance in mm to retract to aid lever decompression (>= 0)
variable_rip_speed              : 3		; Speed mm/s

# Pushback of the remaining tip from the cold end into the hotend. This does
# not have to push back all the way, just sufficient to ensure filament fragment
# stays in hot end and the "nail head" of the cut is pushed back past the
# PTFE/metal junction so it cannot cause clogging problems on future loads.
# Cannot be larger than 'retract_length' - `toolhead_ooze_reduction`
variable_pushback_length        : 15.0		; TUNE ME: PTFE tube length + 3mm is good starting point
variable_pushback_dwell_time    : 0		; Time in ms to dwell after the pushback

# Speed related settings for tip cutting
# Note that if the cut speed is too fast, the steppers can lose steps.
# Therefore, for a cut:
# - We first make a fast move to accumulate some momentum and get the cut
#   blade to the initial contact with the filament
# - We then make a slow move for the actual cut to happen
variable_travel_speed           : 150		; Speed mm/s
variable_cut_fast_move_speed    : 32		; Speed mm/s
variable_cut_slow_move_speed    : 8		; Speed mm/s
variable_evacuate_speed         : 150		; Speed mm/s
variable_cut_dwell_time         : 50		; Time in ms to dwell at the cut point
variable_cut_fast_move_fraction : 1.0		; Fraction of the move that uses fast move
variable_extruder_move_speed    : 25		; Speed mm/s for all extruder movement

# Safety margin for fast vs slow travel. When traveling to the pin location
# we make a safer but longer move if we are closer to the pin than this
# specified margin. Usually setting these to the size of the toolhead
# (plus a small margin) should be good enough
variable_safe_margin_xy         : 30, 30	; Approx toolhead width +5mm, height +5mm)

# If gantry servo option is installed, enable the servo and set up and down
# angle positions
variable_gantry_servo_enabled   : False		; True = enabled, False = disabled
variable_gantry_servo_down_angle: 55		; Angle for when pin is deployed
variable_gantry_servo_up_angle  : 180		; Angle for when pin is retracted


# FORM_TIP ----------------------------------------------------------------
# ███████╗ ██████╗ ██████╗ ███╗   ███╗    ████████╗██╗██████╗ 
# ██╔════╝██╔═══██╗██╔══██╗████╗ ████║    ╚══██╔══╝██║██╔══██╗
# █████╗  ██║   ██║██████╔╝██╔████╔██║       ██║   ██║██████╔╝
# ██╔══╝  ██║   ██║██╔══██╗██║╚██╔╝██║       ██║   ██║██╔═══╝ 
# ██║     ╚██████╔╝██║  ██║██║ ╚═╝ ██║       ██║   ██║██║     
# ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝       ╚═╝   ╚═╝╚═╝     
# Don't need to configure if using tip cutting
#   (base/mmu_form_tip.cfg)
#
[gcode_macro _MMU_FORM_TIP_VARS]
description: Happy Hare tip forming macro configuration variables
gcode: # Leave empty

# Step 1 - Ramming
# Ramming is the initial squeeze of filament prior to cooling moves and is
# described in terms of total volume and progression of squeeze intensity
# printing/standalone. This can be separately controlled when printing or
# standalone
variable_ramming_volume            : 0		; Volume in mm^3, 0 = disabled (optionally let slicer do it)
variable_ramming_volume_standalone : 0		; Volume in mm^3, 0 = disabled

# Optionally set for temperature change (reduction). The wait will occur
# before nozzle separation if 'use_fast_skinnydip: False' else after cooling
# moves. Temperature will be restored after tip creation is complete
variable_toolchange_temp        : 0		; 0 = don't change temp, else temp to set
variable_toolchange_fan_assist  : False		; Whether to use part cooling fan for quicker temp change
variable_toolchange_fan_name    : ''		; Define the part fan name if not default [fan] e.g "fan_generic fan0"
variable_toolchange_fan_speed   : 50		; Fan speed % if using fan_assist enabled

# Step 2 - Nozzle Separation
# The filament is then quickly separated from the meltzone by a fast movement
# before then slowing to travel the remaining distance to cooling tube. The
# initial fast movement should be as fast as extruder can comfortably perform.
# A good starting point# for slower move is unloading_speed_start/cooling_moves.
# Too fast a slower movement can lead to excessively long tips or hairs
variable_unloading_speed_start  : 80		; Speed in mm/s for initial fast movement
variable_unloading_speed        : 18		; Speed in mm/s for slow move to cooling zone

# Step 3 - Cooling Moves
# The cooling move allows the filament to harden while constantly moving back
# and forth in the cooling tube portion of the extruder to prevent a bulbous
# tip forming. The cooling tube position is measured from the internal nozzle
# to just past the top of the heater block (often it is beneficial to add a
# couple of mm to ensure the tip is in the cooling section. The cooling tube
# length is then the distance from here to top of heatsink (this is the length
# length of the cooling moves). The final cooling move is a fast movement to
# break the string formed.
variable_cooling_tube_position  : 35		; Start of cooling tube. DragonST:35, DragonHF:30, Mosquito:30, Revo:35, RapidoHF:27
variable_cooling_tube_length    : 10		; Movement length. DragonST:15, DragonHF:10, Mosquito:20, Revo:10, RapidoHF:10
variable_initial_cooling_speed  : 10		; Initial slow movement (mm/s) to solidify tip and cool string if formed
variable_final_cooling_speed    : 50		; Fast movement (mm/s) Too fast: tip deformation on eject, Too Slow: long string/no separation
variable_cooling_moves          : 4		; Number of back and forth cooling moves to make (2-4 is a good start)

# Step 4 - Skinnydip
# Skinnydip is an advanced final move that may have benefit with some
# material like PLA to burn off persistent very fine hairs. To work the
# depth of insertion is critical (start with it disabled and tune last)
# For reference the internal nozzle would be at a distance of
# cooling_tube_position + cooling_tube_length, the top of the heater
# block would be cooling_tube_length away.
variable_use_skinnydip          : False		; True = enable skinnydip, False = skinnydip move disabled
variable_skinnydip_distance     : 30		; Distance to reinsert filament into hotend starting from end of cooling tube
variable_dip_insertion_speed    : 30		; Medium/Slow insertion speed mm/s - Just long enough to melt the fine hairs, too slow will pull up molten filament
variable_dip_extraction_speed   : 70		; Speed mm/s - Around 2x Insertion speed to prevents forming new hairs
variable_melt_zone_pause        : 0		; Pause if melt zone in ms. Default 0
variable_cooling_zone_pause     : 0		; Pause if cooling zone after dip in ms. Default 0
variable_use_fast_skinnydip     : False		; False = Skip the toolhead temp change wait during skinnydip move

# Step 5 - Parking
# Park filament ready to eject
variable_parking_distance       : 0		; Position mm to park the filament at end of tip forming, 0 = leave where filament ends up after tip forming
variable_extruder_eject_speed   : 25		; Speed mm/s used for parking_distance (and final_eject when testing)


# PURGE -------------------------------------------------------------------
# ██████╗ ██╗   ██╗██████╗  ██████╗ ███████╗
# ██╔══██╗██║   ██║██╔══██╗██╔════╝ ██╔════╝
# ██████╔╝██║   ██║██████╔╝██║  ███╗█████╗  
# ██╔═══╝ ██║   ██║██╔══██╗██║   ██║██╔══╝  
# ██║     ╚██████╔╝██║  ██║╚██████╔╝███████╗
# ╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚══════╝
#                                          
# Optional reference (bucket) purge. Blobifier if far better but this can be
# used as a basis for custom purge
#   (base/mmu_purge.cfg)
#
[gcode_macro _MMU_PURGE_VARS]
description: Happy Hare reference purging macro configuration variables
gcode: # Leave empty

# Set speed as fast as you can without the extruder skipping steps. Note that
# you can increase the extruder current for purging in mmu_parameters.cfg
variable_extruder_purge_speed   : 2		; Speed in mm/s for purging


# CLIENT MACROS -----------------------------------------------------------
# ██████╗  █████╗ ██╗   ██╗███████╗███████╗    ██████╗ ███████╗███████╗██╗   ██╗███╗   ███╗███████╗
# ██╔══██╗██╔══██╗██║   ██║██╔════╝██╔════╝    ██╔══██╗██╔════╝██╔════╝██║   ██║████╗ ████║██╔════╝
# ██████╔╝███████║██║   ██║███████╗█████╗      ██████╔╝█████╗  ███████╗██║   ██║██╔████╔██║█████╗  
# ██╔═══╝ ██╔══██║██║   ██║╚════██║██╔══╝      ██╔══██╗██╔══╝  ╚════██║██║   ██║██║╚██╔╝██║██╔══╝  
# ██║     ██║  ██║╚██████╔╝███████║███████╗    ██║  ██║███████╗███████║╚██████╔╝██║ ╚═╝ ██║███████╗
# ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝    ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝
# If using the recommended PAUSE/RESUME/CANCEL_PRINT macros shipped with
# Happy Hare these variables allow for customization and basic extension
# Note that most parameters are pulled from the "movement" (sequence)
# macro above and thus these are supplemental a
#   (optional/client_macros.cfg)
#
[gcode_macro _MMU_CLIENT_VARS]
description: Happy Hare client macro configuration variables
gcode: # Leave empty

variable_reset_ttg_on_cancel    : False		; True/False, Whether reset TTG map if print is canceled
variable_unload_tool_on_cancel  : False		; True/False, Whether to unload the tool on cancel

# You can extend functionality by adding a command (or call to your gcode macro)
variable_user_pause_extension   : ''		; Executed after the klipper base pause
variable_user_resume_extension  : ''		; Executed before the klipper base resume
variable_user_cancel_extension  : ''		; Executed before the klipper base cancel_print


###########################################################################
# Tool change macros
# This is automatically created on installation but you can increase or
# reduce this list to match your number of tools in operation
# Note: it is annoying to have to do this but interfaces like Mainsail rely
# on real macro definitions for tools to be visible in the UI
#
[gcode_macro T0]
gcode: MMU_CHANGE_TOOL TOOL=0
[gcode_macro T1]
gcode: MMU_CHANGE_TOOL TOOL=1
[gcode_macro T2]
gcode: MMU_CHANGE_TOOL TOOL=2
[gcode_macro T3]
gcode: MMU_CHANGE_TOOL TOOL=3
[gcode_macro T4]
gcode: MMU_CHANGE_TOOL TOOL=4
[gcode_macro T5]
gcode: MMU_CHANGE_TOOL TOOL=5
[gcode_macro T6]
gcode: MMU_CHANGE_TOOL TOOL=6
[gcode_macro T7]
gcode: MMU_CHANGE_TOOL TOOL=7

